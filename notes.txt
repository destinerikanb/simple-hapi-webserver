WEB FRAMEWORK
> Web framework : Sebuah kerangka yang dapat membantu mempermudah pengembangan web termasuk dalam membuat web server
> Dengan menggunakan framework penulisan kode akan lebih terstruktur, mudah dipelihara, dan gampang dikembangkan
> Web framework menyediakan sekumpulan tools dan library yang dapat menyederhanakan hal-hal yang sering dilakukan dalam
  pengembangan web, seperti pembuatan server, routing, menangani permintaan, interaksi dengan database, otorisasi,
  hingga meningkatkan ketahanan web dari serangan luar.
> Web framework di Node.js :
    1. Express
        - Express.js merupakan web framework tertua dan terpopuler di Node.js
        - framework ini sangat ringan, mudah diintegrasikan dengan aplikasi web front-end
        - Penulisan kodenya tidak jauh berbeda dengan Node.js native
        - Namun karena sifat ringannya tersebut, ia menjadi framework yang unopinionated alias tidak memiliki aturan untuk menggunakannya
        - Express tidak menyediakan struktur atau kerangka kerja yang baku untuk diikuti oleh developer
        - Sehingga, developer menjadi sulit menentukan seperti apa kode yang optimal.
    2. Hapi
        - Framework lain seperti Hapi menyediakan environment yang lengkap untuk mengembangkan web server yang kompleks
        - Bila menggunakan hapi, kita tidak perlu tools lain untuk menerapkan layer authentication, tokenize, cors, dsb
        - Kelemahan : Abstraksinya terlalu jauh dari Node.js native 
        - Kita perlu belajar secara dalam untuk menguasai framework ini.

MEMBUAT HTTP SERVER
- Tidak melalui core module http, akan tetapi 3rd party @hapi/hapi
- Instal dengan : npm install @hapi/hapi
- Menggunakan module : const Hapi = require('@hapi/hapi');
> Membuat HTTP Server pada hapi

    const Hapi = require('@hapi/hapi');

    const init = async () => {
        const server = Hapi.server({
            port : 5000,
            host : 'localhost',
        })

        await server.start();
        console.log(`Server berjalan pada ${server.info.uri}`);
    }

    init();

> Bedah kode :
    - Server dibuat dengan kode : Hapi.server()
        - Method ini menerima 1 parameter yaitu object ServerOptions
        - Object ServerOptions menampung konfigurasi server, seperti properti port dan host
    
    - Server dijalankan dengan : server.start()
        - Proses menjalankan server dilakukan secara asinkron
        - Server dijalankan didalam fungsi async dan menggunakan await untuk memanggil server.start()
    
    - Setelah server dijalankan kita bisa melihat alamat lengkap dan port dimana server dijalankan dengan :
        server.info.uri

> Saat mengirim request melalui curl : curl -X GET http://localhost:5000 akan diberi response not found 
  karena tidak ada response handler untuk menangani permintaan


METHOD/VERB REQUEST DAN routing
> Setelah membuat dan menjalankan server, perlu menambahkan routing agar server dapat merespons permintaan sesuai dengan
  method dan url yang diminta oleh client
> Routing pada hapi tidak dilakukan di dalam request handler seperti cara native
> Yakni memanfaatkan object route configuration yang disimpan pada method server.route()

        const init = async () => {
            const server = Hapi.server({
                port : 5000,
                host : 'localhost',
            })

            server.route({
                method : 'GET',
                path : '/',
                handler : (request, h) => {
                    return 'Hello World!';
                }
            })
        }

> Object route configuration  memiliki properti yang dapat dimanfaatkan untuk menspesifikasi route yang diinginkan
> Termasuk menspesifikasi :
    - method
    - path
    - handler function (request handler)
> Handler pada hapi dipisahkan berdasarkan route, setiap spesifikasi route memiliki handlernya masing-masing. Kode semakin mudah dikelola.
> Untuk menetapkan lebih dari 1 route configuration dalam method server.route() kita dapat menggunakan array dari route configuration
> Dengan array route configuration kita dapat secara mudah menentukan banyak spesifikasi route

        const init = async () => {
            const server = Hapi.server({
                port : 5000,
                host : 'localhost',
            })

            //Menentukan route
            server.route([
                {
                    method : 'GET',
                    path :'/',
                    handler : (request, h) => {
                        return 'Homepage';
                    }
                },
            ])
        }

> Pisahkan seluruh route configuration pada berkas JavaScript berbeda, agar 1 berkas JavaScript hanya memiliki 1 fungsi/tanggungjawab

        route.js

        const routes = [
            {
                method : 'GET',
                path : '/',
                handler : (request, h) => {
                    return 'Homepage';
                }
            },
            {
                method: 'GET',
                path: '/about',
                handler: (request, h) => {
                    return 'About page';
                }
            }
        ]

        module.exports = routes;

PATH PARAMETER
> Path dalam routing bisa dikatakan sebagai alamat yang digunakan client untuk melakukan permintaan ke server
> Alamat atau path yang dibuat biasanya merupakan teks verbal yang dapat dimengerti oleh client 
> Hanya dengan membaca path dari sebuah tautan biasanya kita langsung tahu apa yang client minta pada server
> Teknik path parameter pada Hapi diterapkan dengan membungkus path dengan tanda {}

        server.route({
            method : 'GET',
            path : '/users/{username}',
            handler : (request, h) => {
                const {username} = request.params;
                return `Hello, ${username}`;
            }
        })

> Nilai path parameter wajib diisi oleh client, bila tidak maka server akan mengalami error
> Pada Hapi kita bisa membuat path parameter bersifat opsional dengan menambahkan tanda ? di akhir nama parameternya

        server.route({
            method : 'GET',
            path : '/users/{username?},
            handler : (request, h) => {
                const {username = 'stranger'} = request.params;
                return `Hello, ${username}`; 
            }
        })

> Kita dapat menentukan lebih dari 1 path parameter.
> Namun optional path parameter hanya dapat digunakan di akhir bagian path saja.

QUERY PARAMETERS
> Teknik ini umum digunakan pada permintaan yang membutuhkan kueri dari client, contohnya seperti pencarian dan filter data
> Data yang dikirim melalui query memiliki format key=value

        localhost:5000?name=harry&location=bali

> Kita bisa mendapatkan nilai dari query parameter melalui request.query

        server.route({
            method : 'GET',
            path : '/',
            handler : (request, h) => {
                const {name, location} = request.query;
                return `Hello, ${name} from ${location}`;
            }
        })


BODY/PAYLOAD REQUEST
> Ketika menggunakan Node.js, untuk mendapatkan data pada body request, meskipun datanya hanya sebatas teks
  kita tetap harus berurusan dengan Readable Stream
> Pada Hapi kita tidak perlu berurusan dengan Readable Stream, Hapi secara default akan mengubah payload JSON menjadi
  object JavaScript. Dengan begitu kita tidak lagi berurusan dengan JSON.parse()
> Payload yang dikirim client dapat diakses pada route handler melalui properti request.payload

        server.route({
            method : 'POST',
            path : '/login',
            handler : (request, h) => {
                const {username, password} = request.payload;
                return `Welcome, ${userbame}!`;
            }
        })